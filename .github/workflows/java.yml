name: Java CI

on:
    push:
        branches: ["main"]
        paths:
            - glide-core/src/**
            - submodules/**
            - java/**
            - .github/workflows/java.yml
            - .github/workflows/install-shared-dependencies/action.yml
            - .github/workflows/test-benchmark/action.yml
            - .github/workflows/lint-rust/action.yml
            - .github/workflows/install-valkey/action.yml
            - .github/json_matrices/build-matrix.json
    pull_request:
        paths:
            - glide-core/src/**
            - submodules/**
            - java/**
            - .github/workflows/java.yml
            - .github/workflows/install-shared-dependencies/action.yml
            - .github/workflows/test-benchmark/action.yml
            - .github/workflows/lint-rust/action.yml
            - .github/workflows/install-valkey/action.yml
            - .github/json_matrices/build-matrix.json
    workflow_dispatch:

    pull_request_target:
        types: [labeled]
        paths:
            - glide-core/src/**
            - submodules/**
            - java/**
            - .github/workflows/java.yml
            - .github/workflows/install-shared-dependencies/action.yml
            - .github/workflows/test-benchmark/action.yml
            - .github/workflows/lint-rust/action.yml
            - .github/workflows/install-valkey/action.yml
            - .github/json_matrices/build-matrix.json
    schedule:
        - cron: "0 0 * * *"

concurrency:
    group: java-${{ github.head_ref || github.ref }}
    cancel-in-progress: true

jobs:
    check_should_run:
      runs-on: ubuntu-latest
      outputs:
        should_run: ${{ steps.check_should_run.outputs.should_run }}
      steps:
        - name: Check for Core changes label
          id: check_should_run
          run: |
            if [[ ("${{ github.event.label.name }}" == "Core changes" &&  "${{github.event_name}}" == 'pull_request_target') || "${{github.event_name}}" != 'pull_request_target' ]]; then
              echo "should_run=true" >> $GITHUB_OUTPUT
            else
              echo "should_run=false" >> $GITHUB_OUTPUT
            fi

    load-engine-matrix:
      runs-on: ubuntu-latest
      # We want to run this job only if the previous job outputs should_run=true,
      # Which means that if the trigger was a label we run this job just if the label was Core changes
      needs: check_should_run  
      if: ${{ needs.check_should_run.outputs.should_run == 'true' }}   
      outputs:
        matrix: ${{ steps.load-engine-matrix.outputs.matrix }}
      steps:
          - name: Checkout
            uses: actions/checkout@v4

          - name: Load the engine matrix
            id: load-engine-matrix
            shell: bash
            run: |
              if [[ "${{ github.event_name }}" == "pull_request" || "${{ github.event_name }}" == "push" ]]; then
                echo "matrix=$(jq -c '[.[] | select(.run == "always")]' < .github/json_matrices/engine-matrix.json)" >> $GITHUB_OUTPUT
              else
                echo "matrix=$(jq -c . < .github/json_matrices/engine-matrix.json)" >> $GITHUB_OUTPUT
              fi

    load-host-matrix:
      runs-on: ubuntu-latest
      needs: check_should_run
      if: ${{ needs.check_should_run.outputs.should_run == 'true' }}
      outputs:
          matrix: ${{ steps.load-host-matrix.outputs.matrix }}
      steps:
          - name: Checkout
            uses: actions/checkout@v4

          - name: load host matrix
            id: load-host-matrix
            shell: bash
            run: |
              if [[ "${{ github.event_name }}" == "pull_request" || "${{ github.event_name }}" == "push" ]]; then
                echo 'matrix={"include":' $(jq '[.[] | select(.run | type == "array" and contains(["always"]))]' .github/json_matrices/build-matrix.json) '}' >> $GITHUB_OUTPUT
              else
                echo 'matrix={"include":' $(jq '[.[] | select(.run | type == "array" and contains(["java"]))]' .github/json_matrices/build-matrix.json) '}' >> $GITHUB_OUTPUT
              fi

    create-version-matrix:
      runs-on: ubuntu-latest
      needs: check_should_run
      if: ${{ needs.check_should_run.outputs.should_run == 'true' }}
      outputs:
          matrix: ${{ steps.create-version-matrix.outputs.matrix }}
      steps:
          - name: Checkout
            uses: actions/checkout@v4

          - name: Create version matrix
            id: create-version-matrix
            
            shell: bash
            # We want to run the full matrix only for scheduled runs and Core changes
            # For other events we want to run only the always matrix which is first and last version supported
            run: |
              if [[ "${{ github.event_name }}" == "pull_request" || "${{github.event_name }}" == "push" ]]; then
                echo 'matrix={"java":["11","17"]}' >> $GITHUB_OUTPUT
              else
                echo 'matrix={"java":["11","17"]}' >> $GITHUB_OUTPUT
              fi

    build-and-test-java-client:
        needs: [load-engine-matrix, load-host-matrix, create-version-matrix]
        timeout-minutes: 35
        strategy:
            # Run all jobs
            fail-fast: false
            matrix:
                java: ${{ fromJson(needs.create-version-matrix.outputs.matrix).java }}
                engine: ${{ fromJson(needs.load-engine-matrix.outputs.matrix) }}
                host: ${{ fromJson(needs.load-host-matrix.outputs.matrix).include }}
        runs-on: ${{ matrix.host.RUNNER }}

        steps:
            - uses: actions/checkout@v4
              with:
                  submodules: recursive

            - uses: gradle/actions/wrapper-validation@v3

            - name: Set up JDK ${{ matrix.java }}
              uses: actions/setup-java@v4
              with:
                  distribution: "temurin"
                  java-version: ${{ matrix.java }}

            - name: Install shared software dependencies
              uses: ./.github/workflows/install-shared-dependencies
              with:
                  os: ${{ matrix.host.OS }}
                  target: ${{ matrix.host.TARGET }}
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  engine-version: ${{ matrix.engine.version }}

            - name: Install protoc (protobuf)
              uses: arduino/setup-protoc@v3
              with:
                  version: "26.1"
                  repo-token: ${{ secrets.GITHUB_TOKEN }}

            - name: Build java client
              working-directory: java
              run: ./gradlew --continue build -x javadoc

            - name: Ensure no skipped files by linter
              working-directory: java
              run: ./gradlew spotlessDiagnose | grep 'All formatters are well behaved for all files'

            - uses: ./.github/workflows/test-benchmark
              with:
                  language-flag: -java

            - name: Upload test & spotbugs reports
              if: always()
              continue-on-error: true
              uses: actions/upload-artifact@v4
              with:
                  name: test-reports-java-${{ matrix.java }}-${{ matrix.engine.type }}-${{ matrix.engine.version }}-${{ matrix.host.RUNNER }}
                  path: |
                      java/client/build/reports/**
                      java/integTest/build/reports/**
                      utils/clusters/**
                      benchmarks/results/**
                      java/client/build/reports/spotbugs/**

    build-amazonlinux-latest:
        if: github.repository_owner == 'valkey-io' && (github.event_name == 'schedule' || github.event.label.name == 'Core changes')
        needs: [load-engine-matrix, create-version-matrix]
        strategy:
            # Run all jobs
            fail-fast: false
            matrix:
                java: ${{ fromJson(needs.create-version-matrix.outputs.matrix).java }}
                engine: ${{ fromJson(needs.load-engine-matrix.outputs.matrix) }}
        runs-on: ubuntu-latest
        container: amazonlinux:latest
        timeout-minutes: 35
        steps:
            - name: Install git
              run: |
                  yum -y remove git
                  yum -y remove git-*
                  yum -y install https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm
                  yum update
                  yum install -y git
                  git --version

            - uses: actions/checkout@v4

            - name: Checkout submodules
              run: |
                  git config --global --add safe.directory "$GITHUB_WORKSPACE"
                  git submodule update --init --recursive

            - name: Install shared software dependencies
              uses: ./.github/workflows/install-shared-dependencies
              with:
                  os: "amazon-linux"
                  target: "x86_64-unknown-linux-gnu"
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  engine-version: ${{ matrix.engine.version }}

            - name: Install protoc (protobuf)
              uses: arduino/setup-protoc@v3
              with:
                  version: "26.1"
                  repo-token: ${{ secrets.GITHUB_TOKEN }}

            - name: Install Java
              run: |
                  yum install -y java-${{ matrix.java }}-amazon-corretto-devel.x86_64

            - name: Build java wrapper
              working-directory: java
              run: ./gradlew --continue build -x javadoc

            - name: Upload test & spotbugs reports
              if: always()
              continue-on-error: true
              uses: actions/upload-artifact@v4
              with:
                  name: test-reports-${{ matrix.java }}-amazon-linux
                  path: |
                      java/client/build/reports/**
                      java/integTest/build/reports/**
                      java/client/build/reports/spotbugs/**

    lint-rust:
        timeout-minutes: 15
        runs-on: ubuntu-latest
        needs: check_should_run
        if: ${{ needs.check_should_run.outputs.should_run == 'true' }}
        steps:
            - uses: actions/checkout@v4
              with:
                  submodules: recursive

            - uses: ./.github/workflows/lint-rust
              with:
                  cargo-toml-folder: ./java
              name: lint java rust
